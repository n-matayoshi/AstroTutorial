---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from "../../components/BlogPost.astro";
// ページルートを構築するための情報が必要な場合は、getStaticPaths()の中に それを記述します。
// ページルートの HTML テンプレートで情報を受け取るには、getStaticPaths()の外側に 記述します。
export async function getStaticPaths() {// getStaticPaths関数はページ ルートの配列を返し、それらのルートにあるすべてのページはファイルで定義されている同じテンプレートを使用します
  const allPosts = await Astro.glob('../posts/*.md');
	const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];
	// Markdown 投稿を 1 つずつ調べて、タグの各配列を1つの大きな配列に結合します
	// Set 次に、見つかったすべての個々のタグから新しいタグを作成します(繰り返し値を無視するため)
	//最後に、そのセットを (重複のない) 配列に変換し、ページ上にタグのリストを表示するために使用できます
	
	// return [
  //   { params: { tag: "astro" }, props: {posts: allPosts} },
  //   { params: { tag: "successes" }, props: {posts: allPosts} },
  //   { params: { tag: "community" }, props: {posts: allPosts} },
  //   { params: { tag: "blogging" }, props: {posts: allPosts} },
  //   { params: { tag: "setbacks" }, props: {posts: allPosts} },
  //   { params: { tag: "learning in public" }, props: {posts: allPosts} },
  // ];// returnの値を置き換え↓
	return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
	// 関数は常に、 (各ページ ルートの呼び出し先)getStaticPathsを含むオブジェクトのリストを返す必要があり、オプションで(これらのページに渡すデータ) を含むオブジェクトのリストを返す必要があります。先ほど、ブログで使用されていることがわかっている各タグ名を定義し、投稿のリスト全体を小道具として各ページに渡しました。paramsprops
	// uniqueTags ここで、配列を使用して各パラメーターを定義し、このオブジェクトのリストを自動的に生成します
	// そして、すべてのブログ投稿のリストは、小道具として各ページに送信される[前に]フィルター処理されるようになりました。投稿をフィルタリングしている前のコード行を必ず削除し、postsの代わりに使用するように HTML テンプレートを更新してくださいfilteredPosts
}

const { tag } = Astro.params;
const { posts } = Astro.props;
// const filteredPosts = posts.filter((post) => post.frontmatter.tags.includes(tag));
---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
	<ul>
    <!-- 1 {filteredPosts.map((post) => <li><a href={post.url}>{post.frontmatter.title}</a></li>)} -->
		<!-- 2 {filteredPosts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title}/>)} -->
		<!-- ↑2リファクタリングして、代わりにコンポーネントを使用する -->
		{posts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}
  </ul>
</BaseLayout>
<!-- url:/tags/[tag] -->
<!-- https://docs.astro.build/ja/tutorial/5-astro-api/2/ -->

<!-- 1.ページルートの配列を返す関数。
getStaticPaths()

2.Astro で 1 つのファイルから複数のページ ルートを作成するプロセス。
動的ルーティング

3.動的に生成されるページルートの名前を定義する値。
パラメータ -->